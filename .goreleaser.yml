---
version: 2
before:
  hooks:
    - go mod tidy
builds:
  - id: ansible
    binary: ansible
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-community
    binary: ansible-community
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-config
    binary: ansible-config
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-connection
    binary: ansible-connection
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-console
    binary: ansible-console
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-doc
    binary: ansible-doc
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-galaxy
    binary: ansible-galaxy
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-inventory
    binary: ansible-inventory
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-lint
    binary: ansible-lint
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-playbook
    binary: ansible-playbook
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-pull
    binary: ansible-pull
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-shell
    binary: ansible-shell
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-test
    binary: ansible-test
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: ansible-vault
    binary: ansible-vault
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
  - id: molecule
    binary: molecule
    env:
      - CGO_ENABLED=0
    goos:
      - windows
    goarch:
      - amd64
    ldflags: -s -w -X main.imageVersion={{ .Env.ANSIBLE_VERSION }}
archives:
  - files:
      - LICENSE
    name_template: "dcjulian29.apps.ansible-via-docker_{{ .Version }}"
    format_overrides:
      - format: zip
        goos: windows
chocolateys:
  - name: dcjulian29.apps.ansible-via-docker
    authors: Julian Easterling <julian@julianscorner.com>
    project_url: https://github.com/dcjulian29/docker-ansible/
    copyright: 2023 Julian Easterling julian@julianscorner.com
    license_url: https://github.com/dcjulian29/docker-ansible/blob/main/LICENSE
    require_license_acceptance: false
    bug_tracker_url: https://github.com/dcjulian29/docker-ansible/issues
    description: |
      ansible-via-docker allows the execution of Ansible and it's related tools via Docker containers
      instead of relying on the underlying operating system to support and run Ansible. This allows
      Ansible to run as a control node on a Windows-based OS with some limitations.

      By utilizing Ansible's playbooks, roles, and modules, developers can automate the deployment of
      software applications across multiple hosting providers, reducing the time and effort required to
      manage complex infrastructure environments. These playbooks, roles, and modules enable developers to
      create, manage, and provision infrastructure resources like virtual machines, load balancers, and
      databases.
    dependencies:
      - id: docker-desktop
    api_key: "{{ .Env.CHOCO_API_KEY}}"
    source_repo: "https://www.myget.org/F/dcjulian29-chocolatey/"
    skip_publish: false
snapshot:
  name_template: "{{ incpatch .Version }}-next"
changelog:
  sort: asc
  filters:
    exclude:
      - '^admin:'
      - '^docs:'
      - '^test:'
